package New.Characteristics;

import New.Model.Entities.Dot;
import New.util.datagenerator.CircleGenerator;
import javafx.scene.shape.Circle;
import org.junit.Test;

import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.*;

public class CharacteristicNormalizedJerkTest {

    @Test
    public void calculate() {
        List<List<Dot>> dotLists = new LinkedList<>();
        dotLists.add(new LinkedList<>());
        dotLists.add(new LinkedList<>());
        /*CircleGenerator generator = new CircleGenerator(
                0, 5, 20
                ,20 , 2, 15, 15
                , 20, 0, 0.5, 4);
        generator.createJsonFromShape();*/

        Float[] x1s = {15.0f,15.927050983124841f,16.76335575687742f,17.427050983124843f,17.85316954888546f,18.0f,17.85316954888546f,17.427050983124843f,16.76335575687742f,15.927050983124843f,15.0f,14.072949016875159f,13.23664424312258f,12.572949016875159f,12.146830451114539f,12.0f,12.146830451114539f,12.572949016875157f,13.23664424312258f,14.072949016875157f};
        Float[] y1s = {18.0f,17.85316954888546f,17.427050983124843f,16.76335575687742f,15.927050983124843f,15.0f,14.072949016875159f,13.23664424312258f,12.572949016875159f,12.146830451114539f,12.0f,12.146830451114539f,12.572949016875157f,13.23664424312258f,14.072949016875157f,15.0f,15.927050983124841f,16.76335575687742f,17.427050983124843f,17.85316954888546f};
        Long[] timeStamps1 = {100000l,100005l,100010l,100015l,100020l,100025l,100030l,100035l,100040l,100045l,100050l,100055l,100060l,100065l,100070l,100075l,100080l,100085l,100090l,100095l};
        Float[] x2s = {35.0f,35.92705098312484f,36.76335575687742f,37.42705098312484f,37.85316954888546f,38.0f,37.85316954888546f,37.42705098312484f,36.76335575687742f,35.92705098312484f,35.0f,34.07294901687516f,33.23664424312258f,32.57294901687516f,32.14683045111454f,32.0f,32.14683045111454f,32.57294901687516f,33.23664424312258f,34.07294901687516f};
        Float[] y2s = {18.0f,17.85316954888546f,17.427050983124843f,16.76335575687742f,15.927050983124843f,15.0f,14.072949016875159f,13.23664424312258f,12.572949016875159f,12.146830451114539f,12.0f,12.146830451114539f,12.572949016875157f,13.23664424312258f,14.072949016875157f,15.0f,15.927050983124841f,16.76335575687742f,17.427050983124843f,17.85316954888546f};
        Long[] timeStamps2 = {200000l,200005l,200010l,200015l,200020l,200025l,200030l,200035l,200040l,200045l,200050l,200055l,200060l,200065l,200070l,200075l,200080l,200085l,200090l,200095l};

        for (int i = 0; i < x1s.length; i++) {
            dotLists.get(0).add(new Dot(x1s[i],y1s[i],0,timeStamps1[i]));
        }

        for (int i = 0; i < x2s.length; i++) {
            dotLists.get(1).add(new Dot(x2s[i],y2s[i],0,timeStamps2[i]));
        }

        double result = new CharacteristicNormalizedJerk("Jerk", "unit").calculateImplementation(dotLists);
        assertEquals(10.96, result, 0.01);
    }
}